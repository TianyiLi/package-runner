/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutScriptsRouteImport } from './routes/_layout/scripts'
import { Route as LayoutRepositoriesRouteImport } from './routes/_layout/repositories'
import { Route as LayoutMonitoringRouteImport } from './routes/_layout/monitoring'
import { Route as LayoutEnvironmentRouteImport } from './routes/_layout/environment'
import { Route as LayoutEditorRouteImport } from './routes/_layout/editor'
import { Route as LayoutConfigRouteImport } from './routes/_layout/config'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutScriptsRoute = LayoutScriptsRouteImport.update({
  id: '/scripts',
  path: '/scripts',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutRepositoriesRoute = LayoutRepositoriesRouteImport.update({
  id: '/repositories',
  path: '/repositories',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutMonitoringRoute = LayoutMonitoringRouteImport.update({
  id: '/monitoring',
  path: '/monitoring',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutEnvironmentRoute = LayoutEnvironmentRouteImport.update({
  id: '/environment',
  path: '/environment',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutEditorRoute = LayoutEditorRouteImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutConfigRoute = LayoutConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/config': typeof LayoutConfigRoute
  '/editor': typeof LayoutEditorRoute
  '/environment': typeof LayoutEnvironmentRoute
  '/monitoring': typeof LayoutMonitoringRoute
  '/repositories': typeof LayoutRepositoriesRoute
  '/scripts': typeof LayoutScriptsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/config': typeof LayoutConfigRoute
  '/editor': typeof LayoutEditorRoute
  '/environment': typeof LayoutEnvironmentRoute
  '/monitoring': typeof LayoutMonitoringRoute
  '/repositories': typeof LayoutRepositoriesRoute
  '/scripts': typeof LayoutScriptsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/config': typeof LayoutConfigRoute
  '/_layout/editor': typeof LayoutEditorRoute
  '/_layout/environment': typeof LayoutEnvironmentRoute
  '/_layout/monitoring': typeof LayoutMonitoringRoute
  '/_layout/repositories': typeof LayoutRepositoriesRoute
  '/_layout/scripts': typeof LayoutScriptsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/config'
    | '/editor'
    | '/environment'
    | '/monitoring'
    | '/repositories'
    | '/scripts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/config'
    | '/editor'
    | '/environment'
    | '/monitoring'
    | '/repositories'
    | '/scripts'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/config'
    | '/_layout/editor'
    | '/_layout/environment'
    | '/_layout/monitoring'
    | '/_layout/repositories'
    | '/_layout/scripts'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/scripts': {
      id: '/_layout/scripts'
      path: '/scripts'
      fullPath: '/scripts'
      preLoaderRoute: typeof LayoutScriptsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/repositories': {
      id: '/_layout/repositories'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof LayoutRepositoriesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/monitoring': {
      id: '/_layout/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof LayoutMonitoringRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/environment': {
      id: '/_layout/environment'
      path: '/environment'
      fullPath: '/environment'
      preLoaderRoute: typeof LayoutEnvironmentRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/editor': {
      id: '/_layout/editor'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof LayoutEditorRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/config': {
      id: '/_layout/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof LayoutConfigRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutConfigRoute: typeof LayoutConfigRoute
  LayoutEditorRoute: typeof LayoutEditorRoute
  LayoutEnvironmentRoute: typeof LayoutEnvironmentRoute
  LayoutMonitoringRoute: typeof LayoutMonitoringRoute
  LayoutRepositoriesRoute: typeof LayoutRepositoriesRoute
  LayoutScriptsRoute: typeof LayoutScriptsRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutConfigRoute: LayoutConfigRoute,
  LayoutEditorRoute: LayoutEditorRoute,
  LayoutEnvironmentRoute: LayoutEnvironmentRoute,
  LayoutMonitoringRoute: LayoutMonitoringRoute,
  LayoutRepositoriesRoute: LayoutRepositoriesRoute,
  LayoutScriptsRoute: LayoutScriptsRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
